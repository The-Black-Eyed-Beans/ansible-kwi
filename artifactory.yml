- name: Creating Artifactory instance
  hosts: localhost
  connection: local

  # vars:
  #   keypair: ${KeyPair}
  #   instance_type: t2.micro
  #   image: ${Image}
  #   subnet: ${Subnet}
  #   region: ${Region}

  tasks:
    # - name: Getting PEM key
    #   aws_s3:
    #     bucket: "{{ bucket }}"
    #     object: "{{ pem }}"
    #     dest: ./
    #     mode: get

    - name: Creating Artifactory Security Group
      ec2_group:
        name: aline-kwi-artifactory-sg
        description: "Security group for Artifactory instance"
        vpc_id: vpc-016639ba0b8b7cacd
        region: us-east-1
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
            rule_desc: Allow access to SSH.
          - proto: tcp
            to_port: 65535
            from_port: 0
            cidr_ip: 0.0.0.0/0
        tags:
          Name: aline-kwi-artifactory-sg

    - name: Creating Artifactory host
      ec2_instance:
        key_name: "{{ keypair }}"
        instance_type: t3.medium
        image_id: "{{ image }}"
        vpc_subnet_id: "{{ subnet }}"
        region: "{{ region }}"
        security_group: aline-kwi-artifactory-sg
        volumes:
          - device_name: /dev/xvda
            ebs:
              volume_size: 64
              volume_type: gp2
              delete_on_termination: true
        user_data: "#!/bin/bash \nsudo yum install java-1.8.0-openjdk-devel docker git -y"
        tags:
          Name: aline-kwi-artifactory-2
      register: artifactory

    - name: Debugging for Artifactory
      debug: msg="{{ item.instance_id }}"
      loop: "{{ artifactory.instances }}"

    - name: Adding new instance to to registered hosts
      add_host:
        hostname: "{{ item.public_ip_address }}"
        groupname: artifactory_group
      loop: "{{ artifactory.instances }}"

    - name: Making Route53 record for artifactory
      route53:
        state: present
        zone: theblackeyedbeans.net
        record: artifactory.keshaun.theblackeyedbeans.net
        type: A
        ttl: 7200
        value: "{{ item.public_ip_address }}"
      loop: "{{ artifactory.instances }}"

    - name: Waiting for SSH to come up
      delegate_to: "{{ item.public_ip_address }}"
      wait_for_connection:
        delay: 60
        timeout: 300
      loop: "{{ artifactory.instances }}"

- name: Configuring Artifactory
  hosts: artifactory_group
  user: ec2-user
  become: yes
  
  vars:
    # ansible_ssh_private_key_file: ${Pem}
    ansible_ssh_private_key_file: "{{ pem }}"
  tasks:
    - name: Installing Nginx
      command: sudo amazon-linux-extras install nginx1 -y

    - name: Installing EPEL
      command: sudo amazon-linux-extras install epel -y

    - name: Installing Certbot
      command: sudo yum install certbot -y

    - name: Starting Docker
      command: sudo systemctl start docker

    - name: Creating Docker Volume
      command: docker volume create artifactory-data

    - name: Pulling Artifactory Docker image
      command: docker pull releases-docker.jfrog.io/jfrog/artifactory-pro:latest

    - name: Making Docker container
      command: docker run -d --name artifactory -p 7777:7777 -p 8082:8082 -p 8081:8081 -v artifactory-data:/var/opt/jfrog/artifactory releases-docker.jfrog.io/jfrog/artifactory-pro:latest

    - name: Creating CertBot certificate
      shell: "sudo certbot certonly --standalone -d artifactory.keshaun.theblackeyedbeans.net --preferred-challenges http --agree-tos -n -m keshaun@eotir.com --keep-until-expiring"

    - name: Copying Config file to remote
      copy:
        src: artifactory.conf
        dest: /etc/nginx/conf.d/
    
    - name: Restarting Nginx Server
      command: sudo systemctl restart nginx

    # - name: Downloading Maven
    #   command: wget https://dlcdn.apache.org/maven/maven-3/3.8.5/binaries/apache-maven-3.8.5-bin.tar.gz

    # - name: Extracting Maven binary tar
    #   command: tar zxf apache-maven-3.8.5-bin.tar.gz
    
    # - name: Save Maven in PATH
    #   command: export PATH=$PATH:/home/ec2-user/apache-maven-3.8.5/bin